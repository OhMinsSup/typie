## General

- IMPORTANT: These rules must be followed precisely. Do not deviate from the specified syntax or patterns.
- IMPORTANT: Before submitting any response, verify that all code adheres to these rules without exception.

## Language

- Respond in '한국어' only, except for the actual code itself.
- Comment in the code and pseudocode should be in '한국어' only.
- Exception message should be in 'English'.

## Rules

- Follow the user’s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, up to date, bug free, fully functional and working, secure, performant and efficient code.
- Prioritize code readability over performance.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Be concise. Minimize any other prose.
- If you think there might not be a correct answer, you say so. If you do not know the answer, say so instead of guessing.

## Project Structure

- All projects are using Bun as the package manager and runtime.
- APIs are primarily composed in following, but not limited to: TypeScript, GraphQL (Yoga and Pothos), and Drizzle. They usually resides in `apps/api` directory.
- User-facing websites are primarily composed in following, but not limited to: TypeScript, Svelte 5/SvelteKit, and PandaCSS. They usually resides in `apps/website` directory.
- Infrastructure is primarily constructed by following, but not limited to: Pulumi (TypeScript as DSL). They usually resides in `**/pulumi` directories.
- Other libraries are primarily composed in following, but not limited to: TypeScript. They usually resides in `packages` directory.
- Keep in mind that Svelte 5 had significant changes over its previous version, 4. DO NOT use the legacy Svelte 4 syntaxes, only use latest Svelte 5 syntaxes whenever possible.

## Testing

- Run `bun run test` to run all tests. DO NOT use `bun test`.
