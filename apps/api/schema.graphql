input AuthorizeSignUpEmailInput {
  code: String!
}

input AuthorizeSingleSignOnInput {
  params: JSON!
  provider: SingleSignOnProvider!
}

scalar Binary

interface Blob {
  id: ID!
}

type CharacterCountChange {
  additions: Int!
  date: DateTime!
  deletions: Int!
}

type Comment {
  content: String
  createdAt: DateTime!
  id: ID!
  state: CommentState!
}

enum CommentState {
  ACTIVE
  DELETED
}

input CreateCommentInput {
  content: String!
  postId: ID!
}

input CreateFolderInput {
  name: String!
  parentEntityId: ID
  siteId: ID!
}

input CreatePostInput {
  parentEntityId: ID
  siteId: ID!
}

input CreatePostReactionInput {
  emoji: String!
  postId: ID!
}

input CreatePreorderPaymentInput {
  email: String!
}

scalar DateTime

input DeleteCommentInput {
  id: ID!
}

type Embed {
  description: String
  html: String
  id: ID!
  thumbnailUrl: String
  title: String
  url: String!
}

input EnrollPlanInput {
  billingCycle: UserPlanBillingCycle!
  planId: ID!
}

type Entity implements IEntity {
  ancestors: [Entity!]!
  children: [Entity!]!
  id: ID!
  node: EntityNode!
  order: Binary!
  permalink: String!
  site: Site!
  slug: String!
}

union EntityNode = Folder | Post

enum EntityState {
  ACTIVE
  DELETED
}

enum EntityType {
  FOLDER
  POST
}

type EntityView implements IEntity {
  children: [EntityView!]!
  id: ID!
  node: EntityViewNode!
  order: Binary!
  permalink: String!
  site: Site!
  slug: String!
}

union EntityViewNode = FolderView | PostView

type File implements Blob {
  id: ID!
  name: String!
  size: Int!
  url: String!
}

input FinalizePreorderPaymentInput {
  email: String!
  paymentId: String!
  wish: String!
}

type Folder implements IFolder {
  entity: Entity!
  id: ID!
  name: String!
}

type FolderView implements IFolder {
  entity: EntityView!
  id: ID!
  name: String!
}

input GenerateSingleSignOnAuthorizationUrlInput {
  email: String
  provider: SingleSignOnProvider!
}

interface IEntity {
  id: ID!
  order: Binary!
  permalink: String!
  site: Site!
  slug: String!
}

interface IFolder {
  id: ID!
  name: String!
}

interface IPost {
  id: ID!
}

interface IPostContent {
  excerpt: String!
  id: ID!
  subtitle: String
  title: String!
}

interface IPostOption {
  allowComments: Boolean!
  allowCopies: Boolean!
  allowReactions: Boolean!
  id: ID!
  visibility: PostVisibility!
}

type Image implements Blob {
  id: ID!
  placeholder: String!
  ratio: Float!
  url: String!
}

input IssueBlobUploadUrlInput {
  filename: String!
}

type IssueBlobUploadUrlResult {
  fields: JSON!
  path: String!
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum JobState {
  COMPLETED
  FAILED
  PENDING
  RUNNING
}

input LoginWithEmailInput {
  email: String!
  password: String!
}

type Mutation {
  authorizeSignUpEmail(input: AuthorizeSignUpEmailInput!): User!
  authorizeSingleSignOn(input: AuthorizeSingleSignOnInput!): User!
  cancelPlan: UserPlan!
  createComment(input: CreateCommentInput!): Comment!
  createFolder(input: CreateFolderInput!): Folder!
  createPost(input: CreatePostInput!): Post!
  createPostReaction(input: CreatePostReactionInput!): PostReaction!
  createPreorderPayment(input: CreatePreorderPaymentInput!): PreorderPayment!
  deleteComment(input: DeleteCommentInput!): Comment!
  enrollPlan(input: EnrollPlanInput!): UserPlan!
  finalizePreorderPayment(input: FinalizePreorderPaymentInput!): PreorderUser!
  generateSingleSignOnAuthorizationUrl(input: GenerateSingleSignOnAuthorizationUrlInput!): String!
  issueBlobUploadUrl(input: IssueBlobUploadUrlInput!): IssueBlobUploadUrlResult!
  loginWithEmail(input: LoginWithEmailInput!): User!
  logout: Boolean!
  persistBlobAsFile(input: PersistBlobAsFileInput!): File!
  persistBlobAsImage(input: PersistBlobAsImageInput!): Image!
  resetPassword(input: ResetPasswordInput!): Boolean!
  sendEmailUpdateEmail(input: SendEmailUpdateEmailInput!): Boolean!
  sendPasswordResetEmail(input: SendPasswordResetEmailInput!): Boolean!
  sendSignUpEmail(input: SendSignUpEmailInput!): Boolean!
  unfurlEmbed(input: UnfurlEmbedInput!): Embed!
  updateEmail(input: UpdateEmailInput!): Boolean!
  updatePaymentMethod(input: UpdatePaymentMethodInput!): PaymentMethod!
  updatePostOption(input: UpdatePostOptionInput!): PostOption!
  updateUser(input: UpdateUserInput!): User!
  verifyIdentity(input: VerifyIdentityInput!): Boolean!
}

enum PaymentInvoiceState {
  CANCELED
  PAID
  UNPAID
  UPCOMING
}

type PaymentMethod {
  createdAt: DateTime!
  id: ID!
  name: String!
}

enum PaymentMethodState {
  ACTIVE
  DEACTIVATED
}

enum PaymentRecordState {
  FAILED
  SUCCEEDED
}

input PersistBlobAsFileInput {
  path: String!
}

input PersistBlobAsImageInput {
  modification: JSON
  path: String!
}

type Plan {
  fee: Int!
  id: ID!
}

enum PlanAvailability {
  PRIVATE
  PUBLIC
}

type Post implements IPost {
  characterCountChange: CharacterCountChange!
  content: PostContent!
  entity: Entity!
  id: ID!
  option: PostOption!
}

type PostContent implements IPostContent {
  excerpt: String!
  id: ID!
  subtitle: String
  title: String!
  update: Binary!
}

enum PostContentSyncKind {
  AWARENESS
  HEARTBEAT
  UPDATE
  VECTOR
}

type PostContentView implements IPostContent {
  body: JSON!
  coverImage: Image
  excerpt: String!
  id: ID!
  maxWidth: Int!
  subtitle: String
  title: String!
}

type PostOption implements IPostOption {
  allowComments: Boolean!
  allowCopies: Boolean!
  allowReactions: Boolean!
  id: ID!
  password: String
  visibility: PostVisibility!
}

type PostOptionView implements IPostOption {
  allowComments: Boolean!
  allowCopies: Boolean!
  allowReactions: Boolean!
  hasPassword: Boolean!
  id: ID!
  visibility: PostVisibility!
}

type PostReaction {
  createdAt: DateTime!
  emoji: String!
  id: ID!
}

type PostView implements IPost {
  comments: [Comment!]!
  content: PostContentView!
  entity: EntityView!
  id: ID!
  option: PostOptionView!
  reactions: [PostReaction!]!
}

enum PostVisibility {
  PRIVATE
  UNLISTED
}

type PreorderPayment {
  id: ID!
}

enum PreorderPaymentState {
  COMPLETED
  FAILED
  PENDING
}

type PreorderUser {
  email: String!
  id: ID!
}

type Query {
  entity(id: ID!): Entity!
  entityView(origin: String!, slug: String!): EntityView!
  entityViewByPermalink(permalink: String!): EntityView!
  image(id: ID!): Image!
  me: User
  post(slug: String!): Post!
  site(siteId: ID!): Site!
}

input ResetPasswordInput {
  code: String!
  password: String!
}

input SendEmailUpdateEmailInput {
  email: String!
}

input SendPasswordResetEmailInput {
  email: String!
}

input SendSignUpEmailInput {
  email: String!
  name: String!
  password: String!
}

enum SingleSignOnProvider {
  GOOGLE
  KAKAO
  NAVER
}

type Site {
  entities: [Entity!]!
  id: ID!
  name: String!
  slug: String!
  url: String!
}

enum SiteState {
  ACTIVE
  DELETED
}

union SiteUpdateStreamPayload = Entity | Site

type Subscription {
  siteUpdateStream(siteId: ID!): SiteUpdateStreamPayload!
}

input UnfurlEmbedInput {
  url: String!
}

input UpdateEmailInput {
  code: String!
}

input UpdatePaymentMethodInput {
  birthOrBusinessRegistrationNumber: String!
  cardNumber: String!
  expiryDate: String!
  passwordTwoDigits: String!
}

input UpdatePostOptionInput {
  allowComments: Boolean!
  allowCopies: Boolean!
  allowReactions: Boolean!
  password: String!
  postId: ID!
  visibility: PostVisibility!
}

input UpdateUserInput {
  name: String!
}

type User {
  characterCountChanges: [CharacterCountChange!]!
  email: String!
  id: ID!
  name: String!
  paymentMethod: PaymentMethod
  sites: [Site!]!
}

type UserPlan {
  billingCycle: UserPlanBillingCycle!
  createdAt: DateTime!
  fee: Int!
  id: ID!
  plan: Plan!
}

enum UserPlanBillingCycle {
  MONTHLY
  YEARLY
}

enum UserPlanState {
  ACTIVE
  CANCELED
}

enum UserState {
  ACTIVE
  DEACTIVATED
}

input VerifyIdentityInput {
  identityVerificationId: String!
}
