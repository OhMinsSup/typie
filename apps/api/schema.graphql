scalar Binary

interface Blob {
  id: ID!
}

input CreatePostInput {
  postId: ID!
}

input CreatePreorderPaymentInput {
  email: String!
}

scalar DateTime

type Embed {
  description: String
  html: String
  id: ID!
  thumbnailUrl: String
  title: String
  url: String!
}

type File implements Blob {
  id: ID!
  name: String!
  size: Int!
  url: String!
}

input FinalizePreorderPaymentInput {
  email: String!
  paymentId: String!
  wish: String!
}

type Image implements Blob {
  id: ID!
  placeholder: String!
  ratio: Float!
  url: String!
}

input IssueBlobUploadUrlInput {
  filename: String!
}

type IssueBlobUploadUrlResult {
  fields: JSON!
  path: String!
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum JobState {
  COMPLETED
  FAILED
  PENDING
  RUNNING
}

type Mutation {
  createPost(input: CreatePostInput!): Boolean!
  createPreorderPayment(input: CreatePreorderPaymentInput!): PreorderPayment!
  finalizePreorderPayment(input: FinalizePreorderPaymentInput!): PreorderUser!
  issueBlobUploadUrl(input: IssueBlobUploadUrlInput!): IssueBlobUploadUrlResult!
  persistBlobAsFile(input: PersistBlobAsFileInput!): File!
  persistBlobAsImage(input: PersistBlobAsImageInput!): Image!
  syncPostContent(input: SyncPostContentInput!): [SyncPostContentPayload!]!
  unfurlEmbed(input: UnfurlEmbedInput!): Embed!
}

input PersistBlobAsFileInput {
  path: String!
}

input PersistBlobAsImageInput {
  modification: JSON
  path: String!
}

enum PostContentSyncKind {
  AWARENESS
  HEARTBEAT
  UPDATE
  VECTOR
}

type PostContentSyncStreamPayload {
  data: Binary!
  kind: PostContentSyncKind!
  postId: ID!
}

type PreorderPayment {
  id: ID!
}

enum PreorderPaymentState {
  COMPLETED
  FAILED
  PENDING
}

type PreorderUser {
  email: String!
  id: ID!
}

type Query {
  image(id: ID!): Image!
  me: User
}

type Subscription {
  postContentSyncStream(postId: ID!): PostContentSyncStreamPayload!
}

input SyncPostContentInput {
  data: Binary!
  kind: PostContentSyncKind!
  postId: ID!
}

type SyncPostContentPayload {
  data: Binary!
  kind: PostContentSyncKind!
}

input UnfurlEmbedInput {
  url: String!
}

type User {
  email: String!
  id: ID!
  name: String!
}

enum UserState {
  ACTIVE
  DEACTIVATED
}
