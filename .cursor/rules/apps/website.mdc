---
description: 
globs: apps/website/**
alwaysApply: false
---
# Website 개발 규칙

## 기본 구조

- Website 앱은 `apps/website` 디렉토리에 위치합니다.
- 프론트엔드는 Svelte 5/SvelteKit을 기반으로 구현합니다.
- 스타일링은 PandaCSS를 사용합니다.

## Svelte 5 개발 가이드라인

### 컴포넌트 작성

- 최신 Svelte 5의 Runes 기반 API를 사용하세요.
  - 상태 관리: `$state`, `$derived` 등의 runes와 `onclick` 등의 이벤트 사용
  - 레거시 Svelte 4 문법(reactive `$` 접두사, `$:` 문법, 이벤트 `on:` 접두사)을 사용하지 마세요.
- 각 컴포넌트는 단일 책임 원칙을 따르도록 설계하세요.
- Props 및 이벤트는 명시적인 타입을 사용하세요.
- 컴포넌트 파일 이름은 PascalCase를 사용하세요.
- 대형 컴포넌트는 작은 컴포넌트로 분리하세요.

### 라우팅

- SvelteKit의 파일 시스템 기반 라우팅을 사용하세요.
- 라우트 레이아웃과 페이지 구조를 적절히 설계하세요.
- 동적 라우트는 명확한 패턴을 따르세요.
- 중첩된 레이아웃을 활용하여 코드 중복을 줄이세요.

### 상태 관리

- 로컬 상태는 컴포넌트 내 `$state`를 사용하세요.
- 공유 상태는 별도 `*.svelte.ts` 파일의 `$state`를 사용하세요.
- 파생된 상태는 `$derived`를 사용하세요.

## PandaCSS 스타일링 가이드라인

- 디자인 토큰을 활용하여 일관된 디자인 시스템을 구축하세요.
- 프로젝트에 정의된 디자인 토큰은 [index.ts](mdc:apps/website/src/styles/index.ts) 및 해당 파일의 임포트에서 확인할 수 있습니다.
- 컴포넌트 스타일은 PandaCSS의 `css` 함수나 `flex`, `center` 등의 패턴 함수를 사용하세요.

## 접근성

- 시맨틱 HTML 요소를 적절히 사용하세요.
- 키보드 네비게이션과 스크린 리더 지원을 보장하세요.
- 충분한 색상 대비와 가독성을 유지하세요.
- 접근성 속성(ARIA)을 적절히 사용하세요.
- 모든 상호작용 요소는 접근성을 고려하여 설계하세요.
