---
description: 
globs: 
alwaysApply: true
---
# 일반 원칙

- **중요**: 이 규칙들은 정확하게 따라야 합니다. 지정된 구문이나 패턴에서 벗어나지 마세요.
- **중요**: 응답을 제출하기 전에 모든 코드가 예외 없이 이 규칙을 준수하는지 확인하세요.
- 사용자의 요구사항을 주의 깊게 정확히 따르세요.
- 항상 정확하고, 최신의, 버그 없는, 완전히 기능하는, 안전하고, 성능이 좋으며 효율적인 코드를 작성하세요.
- 성능보다 코드 가독성을 우선시하세요.
- 모든 요청된 기능을 완전히 구현하세요.
- TODO, 자리 표시자 또는 누락된 부분을 남기지 마세요.
- 간결하게 작성하세요. 불필요한 설명을 최소화하세요.

# 코드 품질 규칙

- 코드는 프로젝트의 린트 규칙을 반드시 준수해야 합니다.
- 타입스크립트 사용 시 any 타입을 피하고 명시적인 타입을 사용하세요.
- 중복 코드는 공통 모듈이나 유틸리티 함수로 분리하세요.
- 복잡한 로직은 이해하기 쉽도록 작은 단위의 함수로 나누세요.
- try-catch를 사용해 비동기 코드의 예외를 적절히 처리하세요.
- 각 함수는 하나의 명확한 목적만을 가지도록 작성하세요.
- 숫자나 문자열은 의미 있는 상수명으로 정의해 사용하세요.
- 함수와 변수의 이름만으로도 역할을 이해할 수 있게 작성하세요.
- 주석은 코드의 '의도'와 '이유'를 설명하고, 코드는 '동작'을 명확히 표현하세요.
- 코드만으로 의도가 명확한 경우 불필요한 주석은 작성하지 마세요.
- if문이나 for문의 중첩은 3단계를 넘지 않도록 구조화하세요.
- 함수 내 로직은 일관된 추상화 수준을 유지하세요.

# 코드 작성 워크플로우

- 단계별로 생각하세요 - 구축할 내용에 대한 계획을 의사 코드로 상세하게 작성하세요.
- 코드 작성 단계:
  1. 요구사항 분석: 사용자의 요구사항을 철저히 분석하세요.
  2. 계획 수립: 구현할 코드의 구조와 로직을 의사 코드로 상세히 계획하세요.
  3. 구현: 계획에 따라 코드를 작성하세요.
  4. 검토: 작성한 코드가 모든 요구사항을 충족하는지 확인하세요.
  5. 최적화: 필요한 경우 코드를 최적화하되, 가독성을 해치지 않도록 하세요.
- 복잡한 기능은 작은 단위로 나누어 구현하세요.
- 코드 작성 시 예외 상황과 오류 처리를 고려하세요.
- 코드를 수정할 때는 기존 코드 스타일과 일관성을 유지하세요.

# 언어 사용 규칙

- 코드 자체를 제외하고 모든 응답은 한국어로 작성하세요.
- 코드와 의사 코드의 주석은 한국어로만 작성하세요.
- 예외 메시지는 영어로 작성하세요.
- 변수명, 함수명, 클래스명 등은 영어로 작성하되, 명확하고 의미 있는 이름을 사용하세요.
- 코드 로직을 설명할 때는 한국어로 명확하게 설명하세요.
- API 응답 메시지나 사용자 인터페이스 텍스트는 요구사항에 따라 한국어 또는 영어로 작성하세요.
