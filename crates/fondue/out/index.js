/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path');

const { platform, arch } = process;

let nativeBinding = null;
let localFileExisted = false;
let loadError = null;

switch (platform) {
  case 'darwin':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'fondue.darwin-arm64.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./fondue.darwin-arm64.node');
          } else {
            nativeBinding = require('@typie/fondue-darwin-arm64');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`);
    }
    break;
  case 'linux':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'fondue.linux-arm64-gnu.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./fondue.linux-arm64-gnu.node');
          } else {
            nativeBinding = require('@typie/fondue-linux-arm64-gnu');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}

const { toWoff2, getFontMetadata } = nativeBinding;

module.exports = {
  toWoff2,
  getFontMetadata,
};
